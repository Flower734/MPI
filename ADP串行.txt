#include <iostream>
#include <fstream>
#include <vector>
#include <math.h>
#include <time.h>
#include <string>
#include <string.h>
#include <sstream>
#include <algorithm>
#include <smmintrin.h>
#include <nmmintrin.h>
#include <xmmintrin.h>
#include <emmintrin.h>
#include <pmmintrin.h>
#include <tmmintrin.h>
#include <immintrin.h>
#define MAXSIZE 2000
using namespace std;
class index {
public:
	int len = 0;
	vector<unsigned int> arr;
};
class Hash_List {
public:
	int beg = -1;
	int end = -1;
};
bool operator<(const index& s1, const index& s2)
{
	return s1.len < s2.len; //��С��������
}
index s;
index temp;
Hash_List** HL;
void sorted(int* list, vector<index>& idx, int num) {
	for (int i = 0; i < num - 1; i++) {
		for (int j = 0; j < num - i - 1; j++) {
			if (idx[list[j]].len > idx[list[j + 1]].len) {
				int tmp = list[j];
				list[j] = list[j + 1];
				list[j + 1] = tmp;
			}
		}
	}
}
class BitMap
{
public:
	BitMap(int range)
	{
		//���ٿռ�
		this->m_bits.resize(range / 32 + 1);
		this->fir_index.resize(range / 1024 + 1);
		this->sec_index.resize(range / 32768 + 1);
	}

	void set(int data)
	{
		int index0 = data / 32; //��������������
		int index1 = index0 / 1024;
		int index2 = index1 / 1024;
		int temp0 = data % 32; //����λ������
		int temp1 = temp0 / 32;
		int temp2 = temp1 / 32;

		this->m_bits[index0] |= (1 << temp0); //����4λ��Ϊ1
		this->fir_index[index1] |= (1 << temp1);
		this->sec_index[index2] |= (1 << temp2);
	}

	void reset(int data)
	{
		int index = data / 32;
		int temp = data % 32;
		this->m_bits[index] &= ~(1 << temp); //ȡ��
	}
	vector<int> m_bits;
	vector<int> fir_index;
	vector<int> sec_index;
};
BitMap s_(30000000);
void compare(int* list, vector<index>& idx, int num)
{
	vector<index> idx_;
	for (int i = 0; i < num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	sort(idx_.begin(), idx_.end());
	vector<BitMap> bitmap;
	for (int i = 0; i < num; i++)
	{
		bitmap.push_back(30000000);
		for (int j = 0; j < idx_[i].len; j++)
		{
			bitmap[i].set(idx_[i].arr[j]);
		}
	}
	int count = 0;
	bool isExist = false;
	s_ = bitmap[0];
	for (int i = 1; i < num; i++)
	{
		for (int j = 0; j < bitmap[0].sec_index.size(); j++)
		{
			if ((s_.sec_index[j] ^ bitmap[i].sec_index[j]) == 0 && s_.sec_index[j] != 0)//��λ���
			{
				for (int t = j * 32; t < j * 32 + 32; t++)
				{
					if ((s_.fir_index[t] ^ bitmap[i].sec_index[t]) == 0 && s_.fir_index[t] != 0)
					{
						for (int l = t * 32; l < t * 32 + 32; l++)
							if ((s_.m_bits[l] ^ bitmap[i].m_bits[l]) == 0 && s_.m_bits[l] != 0)
								isExist = true;
					}
				}
			}
			if (isExist == false)
			{
				s_.sec_index[j] = 0;
			}
		}
	}
}
vector<unsigned int> S;
vector<unsigned int>& ADP(int* list, vector<index>& idx, int num)
{

	int s = 1;
	bool found = true;
	vector<index> idx_;
	for (int i = 0; i < num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	sort(idx_.begin(), idx_.end());

	for (int t = 0; t < idx_[0].len; t++)
	{
		unsigned int e = idx_[0].arr[t];
		s = 1;
		for (int i = 1; i < num; i++) {
			found = false;
			for (int j = 0; j < idx_[i].len; j++) {
				if (idx_[i].arr[j] == e) {
					found = true;
					break;
				}
			}
			if (found == false) {
				break;
			}
		}
		if (found == true) {
			S.push_back(e);
		}
	}
	return S;
}
vector<index> idx;
int main() {
	//��ȡ�������ļ�
	fstream file;
	file.open("ExpIndex", ios::binary | ios::in);
	if (!file.is_open()) {
		cout << "No file";
		return 0;

	}

	for (int i = 0; i < 2000; i++) {
		index temp;
		file.read((char*)&temp.len, sizeof(temp.len));
		for (int j = 0; j < (temp.len); j++)
		{
			unsigned int binary_temp;
			file.read((char*)&binary_temp, sizeof(binary_temp));
			temp.arr.push_back(binary_temp);
		}
		idx.push_back(temp);
	}
	file.close();
	/*---------------------------------------------------------------------------------------------------------*/
	file.open("ExpQuery", ios::in);
	int query[1000][5] = { 0 };
	string line;
	int count = 0;
	while (getline(file, line)) {
		stringstream ss; //������
		ss << line; //�����д�ֵ
		int a = 0;
		while (!ss.eof()) {
			int temp;
			ss >> temp;
			query[count][a] = temp;
			a++;
		}
		count++;
	}
	file.close();
	/*-----------------------------------------------------------------------------------------------------------*/

	clock_t start, end;
	start = clock();
	for (int i = 0; i < 1000; i++) {
		int num = 0;
		for (int j = 0; j < 5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int* list = new int[num];//�����е���
		for (int j = 0; j < num; j++) {
			list[j] = query[i][j];
		}
		//------ - ������-------- -
		ADP(list, idx, num);
		delete list;
	}
	end = clock();
	cout << "λ�������ĵ��¼���" << (end - start) / 10000 << endl;
	return 0;
}

